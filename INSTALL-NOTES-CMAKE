****************************************************************************
*  Copyright 1997-2019                                                     *
*  Lawrence Livermore National Security, LLC.                            *
*  All rights reserved.                                                    *
****************************************************************************
****************************************************************************
*                                                                          *
*     Structured Adaptive Mesh Refinement Applications Infrastructure      *
*                   http://www.llnl.gov/CASC/SAMRAI                        *
*                                                                          *
****************************************************************************
*    For installation help, see INSTALL-NOTES.                             *
*    For release notes, see RELEASE-NOTES.                                 *
*    For copyright information, see COPYRIGHT and LICENSE.          *
*    For code and user documentation, see files in /docs directory         *
*    For help and information about updates and releases, please send      *
*        email to samrai@llnl.gov                                          *
*    For reporting bugs and suggestions, internal CASC users please use    *
*        the CASC bug tracking system at http://www-casc-llnl.gov/bugs/    *
*        and external users please send email to samrai-bugs@llnl.gov      *
*    For more information on SAMRAI see http://www.llnl.gov/CASC/SAMRAI/   *
****************************************************************************
****************************************************************************

Overview
--------

This document describes the SAMRAI installation process.

Documentation for the library can be found in the docs directory after
you untar the distribution.  See the docs/main.html web page for pointers
to other documents.

Directory Structure
-------------------

We recommend the following directory structure:

	SAMRAI-vX.Y.Z/
		SAMRAI/
		ARCH1-CXX1-OPTDEBUG1/
			config/ lib/
		ARCH2-CXX2-OPTDEBUG2/
			config/ lib/
		ARCH3-CXX3-OPTDEBUG3/
			config/ lib/

where SAMRAI/ is the SAMRAI source distribution and the other
subdirectories contain library archives and configuration files
for a particular architecture, compiler, and set of optimization
flags.  For example,

	SAMRAI-v3.3.3/
		SAMRAI/
		solaris-g++-debug/
			config/ lib/
		solaris-KCC-opt/
			config/ lib/
		rs6000-g++-optdebug/
			config/ lib/

The subdirectories config/, lib/, etc.,
are created automatically by the SAMRAI installation procedure
(configure).

(1) Unpacking the Distribution
------------------------------

The SAMRAI source code is generally distributed as a gzipped tar file.
SAMRAI version numbers are of the form X.Y.Z, where X is the major release
number, Y is the minor release number, and Z is the bug fix patch number.
To unpack the distribution as described above, do:

        (a) gunzip SAMRAI-vX.Y.Z.tar.gz
	(b) mkdir SAMRAI-vX.Y.Z (substitue appropriate version numbers)
	(b) cd SAMRAI-vX.Y.Z
        (e) tar xvf ../SAMRAI-vX.Y.Z.tar

You may need to use the GNU tar (often named gtar) due to name length
problems with some of the native tar implementations.

Note that this assumes that the SAMRAI tar file is in the same directory
as SAMRAI-v.X.Y.Z.  If this is not the case, you will need to change the
path in the zcat to point to the SAMRAI tar file.

After these steps, the directories should look as follows:

	SAMRAI-vX.Y.Z/
		SAMRAI/

(2) CMake build system
----------------------------

The CMake build system uses the open source tool CMake supplemented with the
macro library BLT.  An execution of CMAKE will determine the various
system-dependent features are needed during the compilation, and allows users
to turn on or off optional features and dependencies.

Users should make sure that BLT is included in the SAMRAI distribution that
they are trying to install.  BLT is included as a submodule in SAMRAI's github
repository, and its presence in your distribution depends on how you 
obtained SAMRAI.  If you downloaded SAMRAI from the llnl.gov project page,
BLT should be included in the distributed tarball.  If you obtained the
tarball from the "Releases" section of SAMRAI's github page, BLT will not
be there.  These tarballs are automatically generated by github and do not
include submodules.  If you do not have blt as subdirectory in the top
level of your SAMRAI distribution, run

 git submodule init
 git submodule update

before proceeded with a CMake-based build.

The object files for SAMRAI files are typically compiled into a separate
directory from the SAMRAI source.  This approach facilitates building separate
SAMRAI installations in the same directory structure (e.g., for different
architectures that share a file system).  This object directory can be placed
at the same level as the SAMRAI distribution:

	SAMRAI-vX.Y.Z/
		SAMRAI/
		objs/

where the directory name ``objs'' is arbitrary.  To configure SAMRAI for your
architecture, do the following:

	(a) mkdir objs
	(b) cd objs
	(c) cmake ../SAMRAI [options]

where [options] are a set of optional flags to select different configuration
options.

See the section "CMake Options" below for more details on supported 
configuration options.  

(4) Making the Libraries
------------------------

The CMake configuration is set up by default to build all of the SAMRAI
libraries as well as the test code and executables.  If you just want the
SAMRAI libraries so that you can link them into your application, you should
run cmake with the option ``-DENABLE_TESTS=OFF''.  If you already ran cmake
without this option, that's OK, just run it again with this option added.

To build, make sure you are in directory ``objs'' and use GNU make
(standard Unix make will NOT work) to build the libraries. 

	(a) cd objs
	(b) gmake

At any time if you want to start over you may remove all object and library
files via ``gmake clean''.

(4) Making the tools
------------------------

The optional tools may be built if you add this to the cmake line:

   -DENABLE_TOOLS=ON 

This includes the restart-redistribute utility to convert a SAMRAI
restart file to run on N processors to one compatible with running on
M processors.


(6) Installing the Libraries
----------------------------

After the libraries have been created, install the libraries and configuration
files using:

	(a) gmake install

For this to work, you must have used the ``-DCMAKE_INSTALL_PREFIX=[directory]''
to specify where you want your installed files to be located.
``gmake install'' will move files into the specified directory.

(6) Cleaning Up
---------------

After installing the libraries, you may remove the source and 
object directory ``objs'' in which SAMRAI was compiled.  However, 
it is recommended that you do not remove the SAMRAI source
directory, since it contains source files for the debugger.


CMake Options:
-------------------

There are many CMake options that can be put on the CMake line.  Here we
list some of the most useful options.

Compilers:

  -DCMAKE_CXX_COMPILER=[C++ compiler]
  -DCMAKE_Fortran_COMPILER=[Fortran compiler]

Libraries:

Setting the optional third-party libraries follows a straightforward pattern.

 -DHDF5_DIR=[HDF5 directory location]
 -DHYPRE_DIR=[HYPRE directory location]
 -DPETSC_DIR=[PESTC directory location]
 -DSILO_DIR=[SILO directory location]
 -DSUNDIALS_DIR=[Sundials directory location]
 -DCONDUIT_DIR=[Conduit directory location]

HDF5 is the only one of these that is included by default.  CMake usually will
be able to find an HDF5 installation without one being specified on the
command line, but this option allows you to point explicitly to an
installation.

These libraries can also be explicitly excluded using

 -DENABLE_HDF5=OFF
 -DENABLE_HYPRE=OFF
 -DENABLE_PETSC=OFF
 -DENABLE_SILO=OFF
 -DENABLE_SUNDIALS=OFF
 -DENABLE_CONDUIT=OFF

Build options:

This CMake option governs usage of optimization or debugging flags:

 -DCMAKE_BUILD_TYPE=[Release|Debug|RelWithDebInfo]

Choose whether to build executables or just the libraries:

 -DENABLE_TESTS=[ON|OFF]  (Default ON)
 -DENABLE_TOOLS=[ON|OFF]  (Default OFF)

Installation options:

 -DCMAKE_INSTALL_PREFIX=[installation directory]

Documentation:

 To enable the build of documenation using doxygen, add:

 -DENABLE_DOCS=ON
 

Versions of libraries/tools used by the development team
--------------------------------------------------------

The following are the versions of libraries and tools we have used in
the development of the library.  This list should not be considered
as a requirement list (with the exception of PETSc), it is intended to
provide information on versions we believe should be working.  Users
who encounter problems compiling and linking and want to see if they
are using a version significantly older or newer.  The versions listed
are used in our regression test suite.

Tool 		Version(s)
--------------  --------------------------------------  
gcc		7.3.0, 8.1.0

icc		18.0.2, 19.0.0

HDF5		1.8.5

MVAPICH2        2.2

PETSc 	        3.10.5    (this version is required if PETSc is used)

Sundials        4.1.0

hypre           2.11.1

VisIt		2.13.3

doxygen	        1.6.1

graphviz	2.26


Visualization Tools:
--------------------

SAMRAI uses the VisIt visualization system.  This replaces the
vizamrai utility used in the past.  VisIt binaries, source, and
documentation are available at http://www.llnl.gov/visit.  You must
compile with HDF in order to create VisIt output files.  See the
SAMRAI/test/applications/Euler program for an example of how to use
the VisItDataWriter.

Location users can find VisIt in /usr/apps/visit on CASC systems and
/usr/gapps/ on LC systems.

Performance Analysis Tools:
---------------------------

SAMRAI maintains links to the Tau performance analysis tool.  Tau
(Tuning and Analysis Utilities) is a freely available tool out of the
University of Oregon (http://www.cs.uoregon.edu/research/paracomp/tau)
that is available on all CASC and LC platforms.

Configuration options for Tau have not yet been ported to the CMake build
system.  Please use the autoconf/configure build system as described
in INSTALL-NOTES to configure with Tau.

Documentation
--------------------

SAMRAI uses the Doxygen system for building code documentation.  The
Graphviz is also utilized for building the inheritance/relationship
diagrams within the documentation.

To enable a build of the documentation using doxygen, run cmake with the
option ``-DENABLE_DOCS=ON'' and then run ``make doxygen_docs''.

Please note that older version of Doxygen will hang when building the
documentation. The SAMRAI team is using the versions indicated above;
if you are using older versions it may not work.

Doxygen is available at:  http://www.stack.nl/~dimitri/doxygen
Graphviz is available at: http://www.graphviz.org/

****************************************************************************
****************************************************************************
